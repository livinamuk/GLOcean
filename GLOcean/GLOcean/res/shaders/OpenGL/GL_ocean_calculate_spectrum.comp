#version 430

struct Complex {
    float r;
    float i;
};

Complex add(const Complex a, const Complex b) {
    return Complex(a.r + b.r, a.i + b.i);
}

Complex mult(const Complex a, const Complex b) {
    return Complex(a.r * b.r - a.i * b.i, a.r * b.i + a.i * b.r);
}

Complex conjugate(const Complex a) {
    return Complex(a.r, -a.i);
}

Complex eulerExp(const float s) {
    return Complex(cos(s), sin(s));
}

layout (std430, binding = 0) readonly restrict buffer BufferH0 { Complex h0[]; };
layout (std430, binding = 1) restrict buffer BufferSpectrum { Complex spectrum[]; };
layout (std430, binding = 2) writeonly restrict buffer BufferDispX { Complex dispX[]; };
layout (std430, binding = 3) writeonly restrict buffer BufferDispZ { Complex dispZ[]; };
layout (std430, binding = 4) writeonly restrict buffer BufferGradX { Complex gradX[]; };
layout (std430, binding = 5) writeonly restrict buffer BufferGradZ { Complex gradZ[]; };

uniform uvec2 u_fftGridSize; // In "pixels"
uniform vec2 u_patchSimSize; // Physical lengh, in meters
uniform float u_gravity;
uniform float u_time;

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main() {
    const float kPi = 3.141592653589793;
    const float epsilon = 1e-12f;

    const uint indexX = gl_GlobalInvocationID.x;
    const uint indexZ = gl_GlobalInvocationID.y;

    const uint indexXMirrored = u_fftGridSize.x - indexX - 1;
    const uint indexZMirrored = u_fftGridSize.y - indexZ - 1;

    const uint index = indexZ * u_fftGridSize.x + indexX;
    const uint indexMirrored = indexZMirrored * u_fftGridSize.x + indexXMirrored;

    const float kx = (indexX - u_fftGridSize.x / 2.0f) * (2.0f * kPi / u_patchSimSize.x);
    const float kz = (indexZ - u_fftGridSize.y / 2.0f) * (2.0f * kPi / u_patchSimSize.y);
    const float kLength = sqrt(kx * kx + kz * kz);
    const float w = sqrt(u_gravity * kLength);

    Complex h0_val = h0[index];
    Complex h0_mirrored_val = h0[indexMirrored];

    // Now use the local copies
    Complex term1 = mult(h0_val, eulerExp(w * u_time));
    Complex term2 = mult(conjugate(h0_mirrored_val), eulerExp(-w * u_time));

    spectrum[index] = add(term1, term2);

    gradX[index] = Complex(-kx * spectrum[index].i, kx * spectrum[index].r);
    gradZ[index] = Complex(-kz * spectrum[index].i, kz * spectrum[index].r);

    if (kLength > epsilon) {
        dispX[index] = Complex(kx / kLength * spectrum[index].i, -kx / kLength * spectrum[index].r);
        dispZ[index] = Complex(kz / kLength * spectrum[index].i, -kz / kLength * spectrum[index].r);
    }
    else {
        dispX[index] = Complex(0.0, 0.0);
        dispZ[index] = Complex(0.0, 0.0);
    }
}
